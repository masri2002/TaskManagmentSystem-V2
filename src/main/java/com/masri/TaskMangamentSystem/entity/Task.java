package com.masri.TaskMangamentSystem.entity;

import jakarta.persistence.*;

import java.time.LocalDate;
import java.util.Objects;

/**
 * Represents a task in the task management system.
 * <p>
 * This class includes details such as the title, description, status, priority,
 * and relevant dates for the task. It also manages the assignment of tasks to users
 * and their association with projects.
 * </p>
 * <p>
 * The class uses JPA annotations for ORM mapping and includes constraints to ensure data integrity.
 * </p>
 */
@Entity
@Table(name = "tasks", uniqueConstraints = @UniqueConstraint(columnNames = "task_title"))
public class Task {

    /**
     * The unique identifier for the task.
     * <p>
     * This field is auto-generated by the database.
     * </p>
     */
    private int id;

    /**
     * The title of the task.
     * <p>
     * Title should be unique and not null.
     * </p>
     */
    private String title;

    /**
     * The description of the task.
     * <p>
     * Provides additional details about the task.
     * </p>
     */
    private String description;

    /**
     * The current status of the task.
     * <p>
     * This represents the task's progress or state.
     * </p>
     */
    private Status status;

    /**
     * The priority level of the task.
     * <p>
     * Indicates the importance of the task.
     * </p>
     */
    private Priority priority;

    /**
     * The creation date of the task.
     * <p>
     * Represents when the task was created.
     * </p>
     */
    private LocalDate date;

    /**
     * The due date for the task.
     * <p>
     * Indicates the deadline by which the task should be completed.
     * </p>
     */
    private LocalDate dueDate;

    /**
     * The user assigned to the task.
     * <p>
     * Each task can be associated with a specific user.
     * </p>
     */
    private User user;

    /**
     * The project associated with the task.
     * <p>
     * Each task can be linked to a specific project.
     * </p>
     */
    private Project project;

    /**
     * Default constructor for the Task class.
     * <p>
     * Required by JPA.
     * </p>
     */
    public Task() {
    }

    /**
     * Constructor to initialize a new Task object with the specified details.
     *
     * @param title       The title of the task.
     * @param description The description of the task.
     * @param status      The status of the task.
     * @param priority    The priority of the task.
     * @param dueDate     The due date associated with the task.
     */
    public Task(String title, String description, Status status, Priority priority, LocalDate dueDate) {
        this.title = title;
        this.description = description;
        this.status = status;
        this.priority = priority;
        this.dueDate = dueDate;
    }

    /**
     * Gets the unique identifier for the task.
     *
     * @return The unique identifier for the task.
     */
    @Id
    @GeneratedValue(generator = "task_id", strategy = GenerationType.SEQUENCE)
    @SequenceGenerator(name = "task_id", sequenceName = "task_id_generator", allocationSize = 1)
    @Column(name = "id")
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier for the task.
     *
     * @param id The unique identifier for the task.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the title of the task.
     *
     * @return The title of the task.
     */
    @Column(name = "task_title", nullable = false)
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of the task.
     *
     * @param title The title of the task.
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the description of the task.
     *
     * @return The description of the task.
     */
    @Column(name = "task_description")
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the task.
     *
     * @param description The description of the task.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the current status of the task.
     *
     * @return The current status of the task.
     */
    @Enumerated(value = EnumType.STRING)
    @Column(name = "task_status")
    public Status getStatus() {
        return status;
    }

    /**
     * Sets the current status of the task.
     *
     * @param status The current status of the task.
     */
    public void setStatus(Status status) {
        this.status = status;
    }

    /**
     * Gets the priority level of the task.
     *
     * @return The priority level of the task.
     */
    @Enumerated(value = EnumType.STRING)
    @Column(name = "task_priority")
    public Priority getPriority() {
        return priority;
    }

    /**
     * Sets the priority level of the task.
     *
     * @param priority The priority level of the task.
     */
    public void setPriority(Priority priority) {
        this.priority = priority;
    }

    /**
     * Gets the creation date of the task.
     *
     * @return The creation date of the task.
     */
    @Column(name = "creation_date")
    public LocalDate getDate() {
        return date;
    }

    /**
     * Sets the creation date of the task.
     *
     * @param date The creation date of the task.
     */
    public void setDate(LocalDate date) {
        this.date = date;
    }

    /**
     * Gets the due date for the task.
     *
     * @return The due date for the task.
     */
    @Column(name = "dead_line")
    public LocalDate getDueDate() {
        return dueDate;
    }

    /**
     * Sets the due date for the task.
     *
     * @param dueDate The due date for the task.
     */
    public void setDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * Gets the user assigned to the task.
     *
     * @return The user assigned to the task.
     */
    @ManyToOne(fetch = FetchType.LAZY, cascade = {
            CascadeType.PERSIST,
            CascadeType.DETACH,
            CascadeType.MERGE,
            CascadeType.REFRESH
    })
    @JoinColumn(name = "user_id")
    public User getUser() {
        return user;
    }

    /**
     * Sets the user assigned to the task.
     *
     * @param user The user assigned to the task.
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Gets the project associated with the task.
     *
     * @return The project associated with the task.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "project_id")
    public Project getProject() {
        return project;
    }

    /**
     * Sets the project associated with the task.
     *
     * @param project The project associated with the task.
     */
    public void setProject(Project project) {
        this.project = project;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * <p>
     * Two tasks are considered equal if they have the same title.
     * </p>
     *
     * @param o The object to compare with this task.
     * @return {@code true} if this task is the same as the other object; {@code false} otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Task task = (Task) o;
        return Objects.equals(title, task.title);
    }

    /**
     * Returns a hash code value for the object.
     * <p>
     * The hash code is computed based on the task's title.
     * </p>
     *
     * @return A hash code value for this task.
     */
    @Override
    public int hashCode() {
        return Objects.hash(title);
    }

    /**
     * Returns a string representation of the Task object.
     *
     * @return A string representation of the Task object.
     */
    @Override
    public String toString() {
        return "Task{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                ", status=" + status +
                ", priority=" + priority +
                ", date=" + date +
                ", dueDate=" + dueDate +
                '}';
    }
}
