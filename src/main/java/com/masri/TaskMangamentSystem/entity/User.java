package com.masri.TaskMangamentSystem.entity;

import com.masri.TaskMangamentSystem.comparator.ProjectComparator;
import com.masri.TaskMangamentSystem.comparator.TaskComparator;
import com.masri.TaskMangamentSystem.excptions.exception.DuplicateTaskExecption;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;

import java.util.Set;
import java.util.TreeSet;

/**
 * Represents a user with a unique identifier, name, and email address.
 * This class also manages the user's tasks and projects.
 * Each user can have multiple tasks and can belong to multiple projects.
 * <p>
 * The class uses JPA annotations for ORM mapping and includes validation constraints
 * for fields to ensure data integrity.
 * </p>
 *
 * @author Ahmad Al-Masri
 */
@Entity
@Table(name = "users")
public class User {

    /**
     * The unique identifier of the user.
     * <p>
     * This field is auto-generated by the database.
     * </p>
     */
    private int id;

    /**
     * The name of the user.
     * <p>
     * Name should not be empty or null.
     * </p>
     */
    @NotEmpty(message = "Name cannot be empty")
    private String name;

    /**
     * The email address of the user.
     * <p>
     * Email must not be empty and should be a valid email address.
     * </p>
     */
    @NotEmpty(message = "Email cannot be empty")
    @Email(message = "Email should be valid")
    private String email;

    /**
     * The set of tasks associated with the user.
     * <p>
     * Each user can have multiple tasks.
     * </p>
     */
    private Set<Task> tasks;

    /**
     * The set of projects associated with the user.
     * <p>
     * Each user can belong to multiple projects.
     * </p>
     */
    private Set<Project> projects;

    /**
     * Constructs a new User with the specified name and email.
     * The user ID is auto-generated.
     *
     * @param name  The name of the user.
     * @param email The email address of the user.
     */
    public User(@NotEmpty(message = "Name cannot be empty") String name,
                @Email(message = "Email should be valid") String email) {
        this.name = name;
        this.email = email;
        this.tasks = new TreeSet<>(new TaskComparator());
        this.projects = new TreeSet<>(new ProjectComparator());
    }

    /**
     * Default constructor for the User class.
     * <p>
     * This constructor is required by JPA.
     * </p>
     */
    public User() {
    }

    /**
     * Gets the unique identifier of the user.
     *
     * @return The unique identifier of the user.
     */
    @Id
    @GeneratedValue(generator = "user-id-generator", strategy = GenerationType.SEQUENCE)
    @SequenceGenerator(name = "user-id-generator", sequenceName = "user_id_seq", allocationSize = 1)
    @Column(name = "id")
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the user.
     *
     * @param id The unique identifier of the user.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Retrieves the name of the user.
     *
     * @return The name of the user.
     */
    @Column(name = "name")
    public @NotEmpty(message = "Name cannot be empty") String getName() {
        return name;
    }

    /**
     * Sets the name of the user.
     *
     * @param name The name of the user.
     */
    public void setName(@NotEmpty(message = "Name cannot be empty") String name) {
        this.name = name;
    }

    /**
     * Retrieves the email address of the user.
     *
     * @return The email address of the user.
     */
    @Column(name = "email", unique = true)
    public @NotEmpty(message = "Email cannot be empty") @Email(message = "Email should be valid") String getEmail() {
        return email;
    }

    /**
     * Sets the email address of the user.
     *
     * @param email The email address of the user.
     */
    public void setEmail(@NotEmpty(message = "Email cannot be empty") @Email(message = "Email should be valid") String email) {
        this.email = email;
    }

    /**
     * Retrieves the set of tasks associated with the user.
     *
     * @return The set of tasks associated with the user.
     */
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "user", cascade = {
            CascadeType.MERGE,
            CascadeType.PERSIST,
            CascadeType.REFRESH,
            CascadeType.DETACH
    })
    public Set<Task> getTasks() {
        return tasks;
    }

    /**
     * Sets the set of tasks associated with the user.
     *
     * @param tasks The set of tasks to be associated with the user.
     */
    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    /**
     * Adds a task to the user's set of tasks.
     * <p>
     * This method also ensures the bidirectional relationship is maintained.
     * If the task is already present, a DuplicateTaskException is thrown.
     * </p>
     *
     * @param task The task to be assigned to the user.
     * @throws DuplicateTaskExecption If the task is already assigned to the user.
     */
    public void addTask(Task task) {
        if (tasks == null) {
            tasks = new TreeSet<>(new TaskComparator());
        }
        if (tasks.add(task)) {
            task.setUser(this);
        } else {
            throw new DuplicateTaskExecption("User already has this task");
        }
    }

    /**
     * Retrieves the set of projects associated with the user.
     *
     * @return The set of projects associated with the user.
     */
    @ManyToMany(cascade = {
            CascadeType.PERSIST,
            CascadeType.MERGE,
            CascadeType.DETACH,
            CascadeType.REFRESH
    })
    @JoinTable(
            name = "user_projects",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "project_id")
    )
    public Set<Project> getProjects() {
        return projects;
    }

    /**
     * Sets the set of projects associated with the user.
     *
     * @param projects The set of projects to be associated with the user.
     */
    public void setProjects(Set<Project> projects) {
        this.projects = projects;
    }

    /**
     * Returns a string representation of the User object.
     *
     * @return A string representation of the User object.
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", projects=" + projects +
                '}';
    }
}
