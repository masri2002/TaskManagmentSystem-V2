package com.masri.TaskMangamentSystem.entity;

import com.masri.TaskMangamentSystem.comparator.TaskComparator;
import com.masri.TaskMangamentSystem.comparator.UserComparator;
import jakarta.persistence.*;

import java.util.Set;
import java.util.TreeSet;

/**
 * Represents a project in the task management system.
 * <p>
 * Each project can have multiple tasks and can have multiple users associated with it.
 * The tasks are ordered by priority using {@link TaskComparator}, and users are ordered
 * using {@link UserComparator}.
 * </p>
 */
@Entity
@Table(name = "projects")
public class Project {

    /**
     * The unique identifier for the project.
     * <p>
     * This field is auto-generated by the database.
     * </p>
     */
    private int id;

    /**
     * The title of the project.
     * <p>
     * Title should not be null.
     * </p>
     */
    private String title;

    /**
     * The description of the project.
     * <p>
     * Provides additional details about the project.
     * </p>
     */
    private String description;

    /**
     * Set of tasks associated with the project, ordered by priority using {@link TaskComparator}.
     * <p>
     * Each project can have multiple tasks, which are managed in a sorted collection.
     * </p>
     */
    private Set<Task> tasks;

    /**
     * Set of users associated with the project.
     * <p>
     * Each project can have multiple users.
     * </p>
     */
    private Set<User> users;

    /**
     * Default constructor for creating a new Project.
     * <p>
     * Initializes an empty TreeSet for tasks and users.
     * </p>
     */
    public Project() {
        this.tasks = new TreeSet<>(new TaskComparator());
        this.users = new TreeSet<>(new UserComparator());
    }

    /**
     * Constructor for creating a new Project with a title and description.
     * <p>
     * Initializes the project ID and sets up an empty TreeSet for tasks and users.
     * </p>
     *
     * @param title       The title of the project.
     * @param description The description of the project.
     */
    public Project(String title, String description) {
        this.title = title;
        this.description = description;
        this.tasks = new TreeSet<>(new TaskComparator());
        this.users = new TreeSet<>(new UserComparator());
    }

    /**
     * Gets the unique identifier for the project.
     *
     * @return The unique identifier for the project.
     */
    @Id
    @GeneratedValue(generator = "project_id", strategy = GenerationType.SEQUENCE)
    @SequenceGenerator(name = "project_id", sequenceName = "project_id_generator", allocationSize = 1)
    @Column(name = "project_id")
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier for the project.
     *
     * @param id The unique identifier for the project.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the title of the project.
     *
     * @return The title of the project.
     */
    @Column(name = "project_title", nullable = false)
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of the project.
     *
     * @param title The title of the project.
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the description of the project.
     *
     * @return The description of the project.
     */
    @Column(name = "project_description")
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the project.
     *
     * @param description The description of the project.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the set of tasks associated with the project.
     * <p>
     * The tasks are ordered by priority using {@link TaskComparator}.
     * </p>
     *
     * @return The set of tasks associated with the project.
     */
    @OneToMany(mappedBy = "project", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    public Set<Task> getTasks() {
        return tasks;
    }

    /**
     * Sets the set of tasks associated with the project.
     * <p>
     * The tasks are ordered by priority using {@link TaskComparator}.
     * </p>
     *
     * @param tasks The set of tasks associated with the project.
     */
    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    /**
     * Gets the set of users associated with the project.
     * <p>
     * Each project can have multiple users.
     * </p>
     *
     * @return The set of users associated with the project.
     */
    @ManyToMany(cascade = {
            CascadeType.PERSIST,
            CascadeType.MERGE
    })
    @JoinTable(name = "user_projects",
            joinColumns = {@JoinColumn(name = "project_id")},
            inverseJoinColumns = {@JoinColumn(name = "user_id")})
    public Set<User> getUsers() {
        return users;
    }

    /**
     * Sets the set of users associated with the project.
     * <p>
     * Each project can have multiple users.
     * </p>
     *
     * @param users The set of users associated with the project.
     */
    public void setUsers(Set<User> users) {
        this.users = users;
    }

    /**
     * Adds a user to the project's set of users.
     * <p>
     * This method also ensures the bidirectional relationship is maintained.
     * </p>
     *
     * @param user The user to be assigned to the project.
     */
    public void addUser(User user) {
        if (users == null) {
            users = new TreeSet<>(new UserComparator());
        }
        users.add(user);
    }

    /**
     * Adds a task to the project's set of tasks.
     * <p>
     * This method also ensures the bidirectional relationship is maintained.
     * </p>
     *
     * @param task The task to be added to the project.
     */
    public void addTask(Task task) {
        if (tasks == null) {
            tasks = new TreeSet<>(new TaskComparator());
        }
        tasks.add(task);
    }

    /**
     * Returns a string representation of the project.
     * <p>
     * Includes the project's ID, title, and description.
     * </p>
     *
     * @return A string representation of the project.
     */
    @Override
    public String toString() {
        return "Project{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                '}';
    }
}
